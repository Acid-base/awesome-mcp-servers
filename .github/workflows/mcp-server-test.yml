---
name: Test and Summarize Report
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test-and-summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Run Tests (Placeholder)
        run: >
          mkdir -p all-test-results

          # Simulate generating some test results (replace with your actual test command)

          echo '[{"repo": "repo-a", "method": "test_one", "status": "SUCCESS", "duration": 0.5}, {"repo": "repo-a", "method": "test_two", "status": "FAILURE", "reason": "Assertion failed:\nExpected true but got false", "duration": 1.2}]' > all-test-results/results-a.json

          echo '[{"repo": "repo-b", "method": "test_three", "status": "SKIPPED", "reason": "Dependency missing", "duration": 0.1}]' > all-test-results/results-b.json

          echo '[{"repo": "repo-c", "method": "test_four", "status": "SUCCESS", "duration": 2.1}]' > all-test-results/results-c.json

          echo 'null' > all-test-results/results-null.json # Example of potential null entry

          echo '[]' > all-test-results/results-empty-array.json # Example of empty array file
      - name: Generate Test Summary
        id: summary
        run: >
          #!/bin/bash

          set -euo pipefail # Add standard bash safety settings


          RESULTS_DIR="all-test-results"

          SUMMARY_FILE="test_summary.md"         # For artifact (full details)

          JSON_SUMMARY_FILE="test_summary.json" # For artifact


          # --- Initial Setup & JSON Processing ---


          echo "Checking for test results in $RESULTS_DIR..."

          # Use -mindepth 1 to avoid matching the directory itself if empty

          if [ ! -d "$RESULTS_DIR" ] || ! find "$RESULTS_DIR" -mindepth 1 -maxdepth 1 -name '*.json' -print -quit | grep -q .; then
            echo "No test result JSON files found in $RESULTS_DIR."
            SUMMARY_CONTENT="### Test Summary\n\nNo test results were found to summarize."
            echo -e "$SUMMARY_CONTENT" > "$SUMMARY_FILE" # Basic file for artifact
            echo -e "$SUMMARY_CONTENT" >> "$GITHUB_STEP_SUMMARY" # Add basic message to step summary
            echo "[]" > "$JSON_SUMMARY_FILE"
            echo "failure_count=0" >> "$GITHUB_OUTPUT"
            echo "summary_status=No Results" >> "$GITHUB_OUTPUT"
            exit 0 # Exit successfully as there's nothing to process
          fi


          echo "Combining JSON files from $RESULTS_DIR..."

          # Use find + jq to combine JSON files into a single array

          # -s: slurp all inputs into one array

          # flatten: handle cases where individual files might contain arrays

          # map(select(. != null)): filter out any null entries potentially introduced

          # Use --slurp instead of -s for clarity

          # Use maxdepth 1 to only look in the immediate directory

          if ! find "$RESULTS_DIR" -maxdepth 1 -name '*.json' -print0 | xargs -0 jq --slurp 'flatten | map(select(. != null))' > "$JSON_SUMMARY_FILE"; then
             echo "::error::Failed to combine JSON results using jq."
             SUMMARY_CONTENT="### Test Summary\n\nError combining test results."
             echo -e "$SUMMARY_CONTENT" > "$SUMMARY_FILE"
             echo -e "$SUMMARY_CONTENT" >> "$GITHUB_STEP_SUMMARY"
             echo "[]" > "$JSON_SUMMARY_FILE" # Create empty JSON artifact on error
             echo "failure_count=1" >> "$GITHUB_OUTPUT" # Signal failure
             echo "summary_status=Error" >> "$GITHUB_OUTPUT"
             exit 1 # Exit with failure code
          fi


          # Check if the combined file is empty or just an empty JSON array '[]'

          if [ ! -s "$JSON_SUMMARY_FILE" ] || [ "$(jq 'length' "$JSON_SUMMARY_FILE")" -eq 0 ]; then
             echo "Combined results file is empty or contains no valid JSON objects after processing."
             SUMMARY_CONTENT="### Test Summary\n\nNo valid test results found after combining files."
             echo -e "$SUMMARY_CONTENT" > "$SUMMARY_FILE"
             echo -e "$SUMMARY_CONTENT" >> "$GITHUB_STEP_SUMMARY"
             # Ensure the JSON file exists as an empty array for the artifact
             echo "[]" > "$JSON_SUMMARY_FILE"
             echo "failure_count=0" >> "$GITHUB_OUTPUT" # No actual test failures found
             echo "summary_status=No Valid Results" >> "$GITHUB_OUTPUT"
             exit 0 # Exit successfully, but indicate no valid results processed
          fi


          echo "Calculating summary counts..."


          # --- Generate Counts & Status ---

          # Use jq to count entries based on status

          # Handle potential errors during jq execution (though less likely here)

          SUCCESS_COUNT=$(jq '[.[] | select(.status=="SUCCESS")] | length' "$JSON_SUMMARY_FILE") || { echo "::error::Failed to calculate SUCCESS_COUNT"; exit 1; }

          FAILURE_COUNT=$(jq '[.[] | select(.status=="FAILURE")] | length' "$JSON_SUMMARY_FILE") || { echo "::error::Failed to calculate FAILURE_COUNT"; exit 1; }

          SKIPPED_COUNT=$(jq '[.[] | select(.status=="SKIPPED")] | length' "$JSON_SUMMARY_FILE") || { echo "::error::Failed to calculate SKIPPED_COUNT"; exit 1; }

          TOTAL_COUNT=$(jq 'length' "$JSON_SUMMARY_FILE") || { echo "::error::Failed to calculate TOTAL_COUNT"; exit 1; }


          echo "Summary Counts: Total=$TOTAL_COUNT, Success=$SUCCESS_COUNT, Failure=$FAILURE_COUNT, Skipped=$SKIPPED_COUNT"


          # Set GitHub outputs for use in later steps

          echo "failure_count=$FAILURE_COUNT" >> "$GITHUB_OUTPUT"


          OVERALL_STATUS="Success"

          if [[ "$FAILURE_COUNT" -gt 0 ]]; then
            OVERALL_STATUS="Failure"
          fi

          echo "summary_status=$OVERALL_STATUS" >> "$GITHUB_OUTPUT"


          # --- Create FULL Markdown Summary File (for Artifact) ---


          echo "Generating full Markdown summary report ($SUMMARY_FILE)..."

          {
            echo "# Test Summary (Full Report)"
            echo
            echo "**Overall Status: $OVERALL_STATUS**"
            echo
            printf -- "- **Total Results Processed:** %s\n" "$TOTAL_COUNT"
            printf -- "- ✅ **Success:** %s\n" "$SUCCESS_COUNT"
            printf -- "- ❌ **Failure:** %s\n" "$FAILURE_COUNT"
            printf -- "- ⚠️ **Skipped:** %s\n" "$SKIPPED_COUNT"
            echo
            echo "## Failures ($FAILURE_COUNT)"
            echo
            if [ "$FAILURE_COUNT" -gt 0 ]; then
               echo "| Repository | Method | Reason | Duration (s) |"
               echo "|------------|--------|--------|--------------|"
               # Use jq -r for raw output
               # Use // "N/A" for default values if fields are missing
               # Use gsub to escape pipes "|" and replace newlines with <br> for Markdown table compatibility
               jq -r '.[] | select(.status=="FAILURE") | "| `\(.repo // "N/A")` | `\(.method // "N/A")` | \(.reason // "N/A" | gsub("\\|"; "\\\\|") | gsub("\r?\n"; "<br>")) | \(.duration // "N/A") |"' "$JSON_SUMMARY_FILE" || \
                 { echo "::error::Failed to extract failure details with jq."; echo "| Error extracting details | | | |"; } # Basic error row if jq fails
            else
              echo "_None_"
            fi
            echo
            echo "## Skipped ($SKIPPED_COUNT)"
            echo
            if [ "$SKIPPED_COUNT" -gt 0 ]; then
               echo "| Repository | Method | Reason | Duration (s) |"
               echo "|------------|--------|--------|--------------|"
               jq -r '.[] | select(.status=="SKIPPED") | "| `\(.repo // "N/A")` | `\(.method // "N/A")` | \(.reason // "N/A" | gsub("\\|"; "\\\\|") | gsub("\r?\n"; "<br>")) | \(.duration // "N/A") |"' "$JSON_SUMMARY_FILE" || \
                 { echo "::error::Failed to extract skipped details with jq."; echo "| Error extracting details | | | |"; } # Basic error row if jq fails
            else
              echo "_None_"
            fi
          } > "$SUMMARY_FILE" # Redirect the block output to the file


          echo "Full report generated: $SUMMARY_FILE"

          echo "Full JSON summary generated: $JSON_SUMMARY_FILE"


          # --- Generate CONCISE Summary for GitHub Step Summary ---


          echo "Generating concise summary for GitHub Actions Step Summary..."

          {
            echo "### Test Summary"
            echo
            echo "**Overall Status: $OVERALL_STATUS**"
            echo "- ✅ **Success:** $SUCCESS_COUNT"
            echo "- ❌ **Failure:** $FAILURE_COUNT"
            echo "- ⚠️ **Skipped:** $SKIPPED_COUNT"
            echo "- **Total Processed:** $TOTAL_COUNT"

            if [[ "$FAILURE_COUNT" -gt 0 || "$SKIPPED_COUNT" -gt 0 ]]; then
              echo "" # Add newline for spacing
              echo "*See the 'test-summary-report' artifact for detailed failure/skipped lists.*"
            fi
          } >> "$GITHUB_STEP_SUMMARY" # Append the block output to the step summary


          echo "GitHub Step Summary updated."

          # --- End of summary generation ---
      - name: Upload Summary Report Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-summary-report
          path: |
            test_summary.md
            test_summary.json
          if-no-files-found: ignore
      - name: Check for Failures in Summary
        if: always()
        run: >
          # Check the outputs from the summary step

          FAILURE_COUNT="${{ steps.summary.outputs.failure_count }}"

          SUMMARY_STATUS="${{ steps.summary.outputs.summary_status }}"


          echo "Checking summary status: $SUMMARY_STATUS, Failure count: $FAILURE_COUNT"


          if [[ "$FAILURE_COUNT" -gt 0 ]]; then
            echo "::error::Detected $FAILURE_COUNT test failure(s) in the summary. Failing workflow."
            exit 1 # Explicitly fail the workflow run due to test failures
          elif [[ "$SUMMARY_STATUS" == "Error" ]]; then
            echo "::error::Summary generation encountered an error. Failing workflow."
            exit 1 # Explicitly fail the workflow run due to summary error
          elif [[ "$SUMMARY_STATUS" == "No Results" || "$SUMMARY_STATUS" == "No Valid Results" ]]; then
            echo "Summary generated, but no test results were found or processed."
            # Decide if this should be a failure - current script treats it as success (exit 0 in summary step)
            # exit 1 # Uncomment this line if 'No Results' should fail the workflow
          else
            echo "No test failures detected in the summary report and summary generation succeeded."
          fi
